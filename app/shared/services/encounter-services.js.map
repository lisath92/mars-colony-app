{"version":3,"file":"encounter-services.js","sourceRoot":"","sources":["file:///C:/Users/lisa_/Documents/RED/projects/mars-colony-app-2/tmp/broccoli_type_script_compiler-input_base_path-nGwWVliH.tmp/0/src/app/shared/services/encounter-services.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAyB,eAAe,CAAC,CAAA;AAEzC,qBAA4B,eAAe,CAAC,CAAA;AAC5C,QAAO,6BAA6B,CAAC,CAAA;AAGrC;IAGE,0BAAoB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;QAF9B,iBAAY,GAAG,uDAAuD,CAAC;IAEvC,CAAC;IAEjC,wCAAa,GAAb;QACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC;aACtC,SAAS,EAAE,CAAC,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAE,CAAC,UAAU,EAA1B,CAA0B,CAAC;aACxD,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC3B,CAAC;IAED,wCAAa,GAAb,UAAc,SAAS;QACrB,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QACrC,IAAI,OAAO,GAAG,IAAI,cAAO,CAAC,EAAC,cAAc,EAAE,kBAAkB,EAAC,CAAC,CAAA;QAE/D,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,EAAE,EAAC,SAAA,OAAO,EAAC,CAAC;aACxD,SAAS,EAAE,CAAC,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAE,CAAC,UAAU,EAA1B,CAA0B,CAAC;aACxD,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC3B,CAAC;IAEO,sCAAW,GAAnB,UAAoB,KAAU;QAC5B,OAAO,CAAC,KAAK,CAAC,oBAAoB,EAAE,KAAK,CAAC,CAAC;QAC3C,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,IAAG,KAAK,CAAC,CAAA;IAC9C,CAAC;IAxBH;QAAC,iBAAU,EAAE;;wBAAA;IAyBb,uBAAC;AAAD,CAAC,AAxBD,IAwBC;AAxBY,wBAAgB,mBAwB5B,CAAA","sourcesContent":["import {Injectable} from '@angular/core';\r\nimport {Encounter} from '../../models';\r\nimport {Http, Headers} from '@angular/http';\r\nimport 'rxjs/add/operator/toPromise';\r\n\r\n@Injectable()\r\nexport class EncounterService {\r\n  encounterUrl = 'https://red-wdp-api.herokuapp.com/api/mars/encounters';\r\n\r\n  constructor(private http: Http){}\r\n\r\n  getEncounters(): Promise<Encounter[]> {\r\n    return this.http.get(this.encounterUrl)\r\n    .toPromise().then(response => response.json().encounters)\r\n    .catch(this.handleError);\r\n  }\r\n\r\n  addEncounters(encounter): Promise<Encounter[]>{\r\n    let body = JSON.stringify(encounter);\r\n    let headers = new Headers({'Content-Type': 'application/json'})\r\n\r\n    return this.http.post(this.encounterUrl, body, {headers})\r\n    .toPromise().then(response => response.json().encounters)\r\n    .catch(this.handleError);\r\n  }\r\n\r\n  private handleError(error: any) {\r\n    console.error('An error occurred!', error);\r\n    return Promise.reject(error.message|| error)\r\n  }\r\n}\r\n"]}